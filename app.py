import streamlit as st
import pandas as pd
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
from utils import load_embeddings, load_questions, load_model, clean_text

EMBEDDINGS_FULL = "data/processed/question_embeddings.npy"
QUESTIONS_FULL = "data/processed/question_texts.txt"
ANSWERS = "data/processed/answer_map.csv"

EMBEDDINGS_CLUSTERED = "data/processed/representative_embeddings.npy"
QUESTIONS_CLUSTERED = "data/processed/representative_questions.txt"

MODEL_NAME = "intfloat/multilingual-e5-base"

st.set_page_config(page_title="Clustered Question Search", layout="centered")
st.title("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º")
st.markdown("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –∏ –º–æ–¥–µ–ª—å –Ω–∞–π–¥—ë—Ç –ø–æ—Ö–æ–∂–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã.")

query = st.text_input("–í–∞—à –≤–æ–ø—Ä–æ—Å", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—Ç–æ –∏–∑–æ–±—Ä—ë–ª –ª–∞–º–ø–æ—á–∫—É?")
mode = st.radio("–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞", ["clustered (–±—ã—Å—Ç—Ä—ã–π)", "full (—Ç–æ—á–Ω—ã–π)"])
k = st.slider("–°–∫–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∫–∞–∑–∞—Ç—å?", 1, 10, 3)

if st.button("–ù–∞–π—Ç–∏") and query:
    st.write("–ò–¥—ë—Ç –ø–æ–∏—Å–∫...")

    model = load_model(MODEL_NAME)
    query_vec = model.encode([clean_text(query)], normalize_embeddings=True)

    if "clustered" in mode:
        embeddings = load_embeddings(EMBEDDINGS_CLUSTERED)
        questions = load_questions(QUESTIONS_CLUSTERED)
    else:
        embeddings = load_embeddings(EMBEDDINGS_FULL)
        questions = load_questions(QUESTIONS_FULL)

    df_answers = pd.read_csv(ANSWERS)

    sims = cosine_similarity(query_vec, embeddings)[0]
    top_idx = np.argsort(sims)[-k:][::-1]

    st.success(f"–ù–∞–π–¥–µ–Ω–æ {k} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    for rank, idx in enumerate(top_idx, 1):
        q = questions[idx]
        row = df_answers[df_answers["question"] == q]
        a = row["answer"].iloc[0] if not row.empty else "–æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        st.markdown(f"""
        **{rank}. {q}**  
        _{a}_  
        –°—Ö–æ–¥—Å—Ç–≤–æ: `{sims[idx]:.4f}`
        """)
